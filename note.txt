*常用linux命令：

pwd #显示当前工作目录
pwd -P #显示当前工作目录的物理位置

su - "user" #切换至其他用户登录，同时切换到新用户的工作环境中
sudo -u "user" "cmd" #一其他用户身份来执行命令

*sudo的意思是，以别的用户（如root）的权限来fork一个进程，加载程序并运行，因此sudo后面不能跟shell的内置命令。

eg：
[xxx@server-7f350f25-62e5-4f3c-a6cc-a60a89439573 ~]$ sudo cd /sys/xxx/xxx
sudo: cd: command not found

这种情况，没有root账户的密码，执行该命令的办法就是使用sudo获得root shell的权限，然后在root shell中执行该命令。
进入root shell很简单，输入sudo bash确认本用户的密码即可（如果/etc/sudoers里配置了无密码使用sudo，就不需要进入密码），此时你会发现命令提示符显示当前root。一旦获得root shell，你就可以执行任何命令而不需要在每条命令前输入sudo了。

[xxx@server-7f350f25-62e5-4f3c-a6cc-a60a89439573 ~]$ sudo bash	//或者sudo su - 或者 sudo -s，其实就是用sudo命令从当前用户切换到root用户

*配置jdk环境变量：

	vi /etc/profile
	//添加如下内容
	JAVA_HOME="/xxx/xxx/xxx"
	CLASS_PATH="$JAVA_HOME/lib:$JAVA_HOME/jre/lib"
	PATH=".:$PATH:$JAVA_HOME/bin"
	export JAVA_HOME CLASS_PATH PATH
	

ls -la #查看当前目录下的所有文件（包含隐藏文件）的详细信息

chmod "code" "文件名" #给文件赋权

*操作文件或目录的用户，有3种不同类型：文件所有者、群组用户、其他用户。最高位表示文件所有者的权限值，中间位表示群组用户的权限值，最低位则表示其他用户的权限值，所以，chmod 777中，三个数字7分别对应上面三种用户，权限值都为7。

r	4	00000100	read，读取。当前用户可以读取文件内容，当前用户可以浏览目录。
w	2	00000010	write，写入。当前用户可以新增或修改文件内容，当前用户可以删除、移动目录或目录内文件。
x	1	00000001	execute，执行。当前用户可以执行文件，当前用户可以进入目录。

*常用：
-rw------- (600) -- 只有属主有读写权限。 
-rw-r--r-- (644) -- 只有属主有读写权限；而属组用户和其他用户只有读权限。 
-rwx------ (700) -- 只有属主有读、写、执行权限。 
-rwxr-xr-x (755) -- 属主有读、写、执行权限；而属组用户和其他用户只有读、执行权限。 
-rwx--x--x (711) -- 属主有读、写、执行权限；而属组用户和其他用户只有执行权限。 
-rw-rw-rw- (666) -- 所有用户都有文件读、写权限。这种做法不可取。 
-rwxrwxrwx (777) -- 所有用户都有读、写、执行权限。更不可取的做法。

*source filename 与 sh filename 及./filename执行脚本的区别：
当shell脚本具有可执行权限时，用sh filename与./filename执行脚本没有区别。
./filename是因为当前目录没有在PATH中，所有”.”是用来表示当前目录的。
sh filename 重新建立一个子shell，在子shell中执行脚本里面的语句，该子shell继承父shell的环境变量，但子shell新建的、改变的变量不会被带回父shell，除非使用export。
source filename：这个命令其实只是简单地读取脚本里面的语句依次在当前shell里面执行，没有建立新的子shell。那么脚本里面所有新建、改变变量的语句都会保存在当前shell里面。

jobs -l #显示所有命令
jobs -r #只显示运行的命令
jobs -s #只显示停止的命令
pidof "进程名" #显示进程号说明该进程已启动，否则未启动"
lsof -i:"pid" #查看端口占用
lsof -i|grep "pid" #根据pid查看端口
netstat -nap|grep "pid" #根据pid查看端口
ps -ef|grep "进程名" #显示正在工作的进程
kill %"jobnumber" #根据job号杀掉进程
kill "pid" #根据进程号杀掉进程
kill -9 "pid" #彻底杀掉进程

whereis xxx #查看安装路径
which xxx #查看运行路径


ctrl+c #终止当前进程
ctrl+d #exit或logout
ctrl+l #clear
ctrl+p #重复上一次命令
ctrl+r #搜索之前执行过的命令
ctrl+z #将当前进程转到后台挂起(进程暂停)

nohup ./"命令行" -b "ip地址" & #将进程放到后台运行（如果ip为0.0.0.0则表示所有IP都可访问该服务）


firewall-cmd --state #查看防火墙状态
systemctl stop firewalld.service #停止防火墙
systemctl disable firewalld.service #禁止防火墙开机启动



*mysql相关：
service mysqld status #查看MySQL服务启动状态
service mysql start #启动mysql
mysql -u"xxx" -p #登录mysql，切换至mysql命令

*关于主键自增：
清表操作如果执行的是delete，则主键不会重置，再插入的记录会在之前最大的主键值基础上自增
此时如果主键长度设置达到限制则无法插入数据，若需要重置，使用truncate

*关于多表连接：
如果两张表关联字段的字符集不同，则在进行联表查询时不会走索引（如果有的话）


*关于分页（limit和offset用法）：
	
	1.select* from article LIMIT 1,3;
	2.select * from article LIMIT 3 OFFSET 1;
	
两种写法都表示取2,3,4三条数据，当limit后面跟两个参数的时候，第一个数表示要跳过的数量，后一位表示要取的数量

例如 select* from article LIMIT 1,3 就是跳过1条数据,从第2条数据开始取，取3条数据，也就是取2,3,4三条数据

当limit后面跟一个参数的时候，该参数表示要取的数据的数量

例如 select* from article LIMIT 3  表示直接取前三条数据，类似sqlserver里的top语法

当 limit和offset组合使用的时候，limit后面只能有一个参数，表示要取的的数量，offset表示要跳过的数量

例如 select * from article LIMIT 3 OFFSET 1 表示跳过1条数据，从第2条数据开始取，取3条数据，也就是取2,3,4三条数据

*一段时间内按时间粒度（eg：天/小时/分钟）的聚合查询（空行不返回）：
        select
--             DATE_FORMAT(tci.CREATE_TIME, '%Y-%m-%d') as `aggDateTime` ,//按每一天
--             HOUR(tci.CREATE_TIME) as `aggDateTime`,//按每小时（24）
			DATE_FORMAT(concat(DATE(CREATE_TIME), ' ', HOUR(CREATE_TIME), ':', FLOOR(MINUTE(CREATE_TIME) / 10) * 10), '%Y-%m-%d %H:%i') as `aggDateTime`,//按每（此处为10）分钟
			ROUND(AVG(TRAFFIC_INDEX), 2) as avgIdx,
			AVG (REAL_SPEED) as avgSpeed,
			AVG (FREE_FLOW_SPEED) as avgFreeFlowSpeed
        from ts_congestion_index as tci
        where tci.CREATE_TIME between DATE_FORMAT('2020-04-01', '%Y-%m-%d %T')
        and DATE_FORMAT(DATE_ADD('2020-04-03',INTERVAL 1 DAY), '%Y-%m-%d %T')
        and TRAFFIC_ID = '500112'
        group by `aggDateTime`
        order by `aggDateTime` asc ;



*oracle相关：
su - oracle #以oracle用户登录
lsnrctl start #打开监听服务
lsnrctl status #查看oracle监听器运行状况
lsnrctl stop #关闭监听器
sqlplus "u"/"p" #以用户名密码直接登录oracle（不推荐，可被 ps -ef|grep sqlplus 命令查看登录信息）
sqlplus /nolog #进入sqlplus命令，即打开sqlplus但未连接oracle

--sqlplus命令下：
	
	conn "用户名"/"密码"@"网络服务器" [as sysdba/sysoper] #连接oracle数据库/切换用户，当用特权用户身份（比如sys）连接时，必须带上as sysdba或是as sysoper
	pass "用户名" #修改用户的密码，如果想要修改其它用户的密码，需要用sys/system登录。如果给自己修改密码，则可以不带用户名，如果给别人修改密码（前提：是sys/system用户来修改），则需要带用户名
	
	alter user "用户名" indentified by "密码"; #修改用户密码
	
	show user #查看当前连接用户
	select * from V_$PWFILE_USERS; #查看哪些用户拥有SYSDBA、SYSOPER权限
	create user "用户名" identified by "密码" default tablespace users Temporary TABLESPACE Temp; #增加数据库用户
	
	grant connect,resource,dba to "用户名"; #用户授权
	grant sysdba to "用户名"; #用户授特权
	commit; #授权需提交
	
	select * from v$database; #查看当前所有数据库
	desc v$databases; #查看数据库结构字段
	database "数据库名"; #进入数据库
	select * from v$instance; #查看所有的数据库实例
	select * from all_tables; #查看当前库的所有数据表
	desc all_tables; #查看表结构
	
	
	disc #断开与当前数据库的连接，但不退出sqlplus
	exit #断开与数据库的连接，同时会退出sqlplus

	shutdown #关闭数据库
	shutdown immediate #立即关闭数据库，没有结束的事务自动rollback

	startup #启动数据库 
	startup force #中止当前数据库的运行，并开始重新正常的启动数据库
	
	
	用户相关(注意sysdba角色权限问题)：

	select * from dba_users; #查看所有用户信息
	alter user xxx account lock; #锁定用户，可防止有会话连接该对象
	alter user xxx account unlock; #解锁用户
	drop user xxx cascade; #级联删除用户
	select sid,serial#,status,program from v$session where username='xxx'; #通过底层表查看当前连接该数据库的会话id，序列号，连接状态，连接工具/方式
	alter system kill session 'sid,serial#'; #杀掉占用的会话
	select user#,name from user$ where name like 'xxx'; #通过底层表查看用户序列号，名称
	update user$ set name='xxx_new' where user#=xx; 
	commit; #通过用户序列号修改用户名，可通过修改用户名操作避免数据迁移/备份带来的风险成本
	alter system checkpoint;
	alter system flush shared_pool; #强制刷新
	alter user xxx_new identified by xxx; #修改用户对应的密码，若是执行过修改用户名则需要此步骤，否则无法连接



*git相关：
git config --global -l #查看全局用户名、邮箱信息
git config --global user.name 'xxx' #设置全局用户名
git config --global user.email 'xxx' #设置全局邮箱
git config --unset --global user.name #删除全局用户名
git config --unset --global user.email #删除全局邮箱
git clone 远程仓库地址 #克隆远程仓库（clone是复合操作，包含init，remote，checkout，fetch等操作，自动创建 .git文件夹和 origin远程地址别名）
git init #将当前目录初始化为一个本地仓库
git status #查看本地文件状态
git remote add 远程仓库名 远程仓库地址 #命名远程仓库并指定地址
git remote -v #查看远程仓库地址
git remote rm 远程仓库名 #删除指定的远程仓库 
git remote rename 原仓库名 新仓库名 #重命名远程仓库
git branch 分支名 #新建一个分支
git branch -d 分支名 #删除已有分支
git checkout 分支名 #切换到已有分支
git checkout -b 分支名 #新建一个分支并切换到该分支上
git fetch 远程仓库名 分支名 #拉取远程分支（不主动merge）
git merge 分支名 #（将该分支（前提是当前已经切换到另一分支）合并到另一分支）
git pull 远程仓库名 分支名 #拉取远程分支
git add 文件名 #将需要提交的文件（一次多文件用空格隔开）添加到git仓库（加入git管理）
git add . #添加所有有变化的文件到git仓库
git commit -m 'xxx' #提交备注
git commit --amend #进入vim，修改备注

git reset --soft HEAD^ #撤销掉最近一次commit（HEAD^表示最近一次，也可写作HEAD~1，如果进行了两次commit可用HEAD~2表示）
	参数：
	soft -> 不删除工作空间改动代码，撤销commit，不撤销git add .
	mixed -> 不删除工作空间改动代码，撤销commit，并且撤销git add . （这个为默认参数，git reset --mixed HEAD^ 和 git reset HEAD^ 效果是一样的）
	hard -> 删除工作空间改动代码，撤销commit，撤销git add . （注意完成这个操作后，就恢复到了上一次的commit状态）

git push 远程仓库名 分支名 #提交到远程分支
git push -u 远程仓库名 分支名 #指定默认/绑定远程分支，这样后面就可以不加任何参数使用git操作（-u是设置上游（upstream））
git push -u -f 远程仓库名 分支名 #强制提交到远程仓库（-f是强制，强制提交会覆盖之前所有内容）
git log #查看提交记录
git stash save 'xxx' #将所有未提交的修改移入本地暂存，并记录msg
git stash list #查看所有stash
git stash pop #恢复（默认第一个）stash，即stash@{0}。依次类推第二个：git stash pop stash@{1}
git stash drop #删除（默认第一个）stash



*node.js相关：
	
1.npm可使用国内阿里的源来替代默认国外的源：
	npm install -g cnpm --registry=https://registry.npm.taobao.org	*注1
继而使用cnpm(中国版npm)替代npm执行命令；

2.也可使用yarn替代npm（更快）:
	npm install -g yarn --registry=https://registry.npm.taobao.org
	或者
	npm install -g yarn（如果执行过注1或者注2则执行这一句就够了）
	yarn config set registry https://registry.npm.taobao.org -g
	yarn config set sass_binary_site http://cdn.npm.taobao.org/dist/node-sass -g
	
常用命令对比：
NPM							YAR
npm init					yarn init				初始化				
npm install					yarn install            默认安装依赖		
npm install xxxx -save		yarn add xxxx           安装某个依赖并保存
npm install -g xxxx			yarn global add xxxx    安装全局依赖		
npm uninstall xxxx -save	yarn remove xxxx        移除依赖			
npm update 					yarn upgrade xxxx       更新依赖			
npm run						yarn run                运行指令			


3.使用cnpm/npm config ls查看配置信息，
可查看使用的哪个源，如果要切换源可使用
	cnpm/npm set registry https://registry.npm.taobao.org/ -g	*注2
也可以使用源管理器nrm:
	cnpm/npm i nrm -g
	等同于
	cnpm/npm install -g nrm

nrm ls #查看可选源下载路径(带*即为当前使用源)
nrm current #查看当前使用包
nrm use "registryName" #切换源
nrm add "registryName" "url" #添加源
nrm del "registryName" #删除源
nrm test "registryName" #测试源速度

*注：执行命令报错则打开nrm安装路径（\node_global\node_modules\nrm）下的cli.js文件做如下改动：
//const NRMRC = path.join(process.env.HOME, '.nrmrc'); (删除)
const NRMRC = path.join(process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'], '.nrmrc');



*vue相关：
1.控制显隐的v-if与v-show：一般来说，v-if有更高的切换消耗，而v-show有更高的初始渲染消耗。因此，如果需要频繁切换，则使用v-show更好

	v-if：支持<template>语法，可以根据表达式的值在DOM中生成或移除一个元素。
	（注意：加了v-if的组件可能无法获取到渲染宽高）
	v-show：不支持<template>语法，可以根据表达式的值来显示或者隐藏HTML元素。当v-show赋值为false时，元素被隐藏，此时查看代码时，该元素上会多一个内联样式style=“display:none”。

2.注意dom元素的class类名不要与绑定的变量/方法名相同，可能导致无效。

3.tips:如有须一次请求后台较大数据做展示的情况，考虑前端伪分页，将渲染数据与全数据分开，避免数据加载有延时。



*综合问题相关：

	*windows解决hosts文件丢失（管理员权限打开cmd执行）：for /f %P in ('dir %windir%\WinSxS\hosts /b /s') do copy %P %windir%\System32\drivers\etc & echo %P & Notepad %P

	*mvn清理命令：for /r %i in (*.lastUpdated) do del %i

	*idea清除缓存文件：删除C:\Users\xxx\.IntelliJIdeaxxxx.x\system下的caches文件夹

	*gradle调用maven离线仓库：
		1、配置build.gradle：
				repositories {
					mavenLocal() //直接使用本地maven仓库
					maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
				}
		2、使用mavenLocal() 时Gradle默认会按以下顺序去查找本地的maven仓库：
			${USER_HOME}/.m2/settings.xml >> M2_HOME/conf/settings.xml >> ${USER_HOME}/.m2/repository
			（注意，maven环境变量要加入M2_HOME， 配置环境变量时很多时候都是只配置MAVEN_HOME或者直接在path中加入bin路径了，导致mavenLocal无法生效）
		3、如果本地没有相关jar包，gradle会下载到${USER_HOME}/.gradle文件夹下，若想让gradle下载到指定文件夹，配置GRADLE_USER_HOME环境变量。

1.@Scheduled注解不生效：如果其参数为cron表达式或者fixedRate则在其所在类上加上@EnableScheduling，否则尝试将参数换为fixedDelay;

2.针对使用mybatis传入参数含/为数组时出现"Data truncation: Truncated incorrect DOUBLE value"错误：
	<foreach collection="遍历对象名" item="item" ...>标签中，不能用参数#{遍历对象名}，应使用#{item};
	
3.@ComponentScan 如果不设置basePackage的话 默认会扫描包的所有类，如果设置了basePackage的话，只会扫描设置路径下的包。从而导致原来项目模块中的包并不会被扫描到。
正式生产场景不推荐扫描所有的包，而是应该将所有需要扫描的包全部写上去。
@ComponentScan(basePackages = {})填String数组或者用逗号隔开的String 都可以。

4.jmm（java内存模型）规定所有变量都储存于主内存中，每条线程都有自己的工作内存/本地内存/栈内存，对变量的操作只能在各自的工作内存中进行，之后将该变化同步刷新回主内存。
  若有多线程下变量改变仍然读到旧值带来的可见性问题，可采取对变量使用锁机制或Volatile关键字：
	1.变量改变即刷新回主存，保证不同线程对变量（主内存中共享变量的副本）操作的立即可见；
	2.禁止（通过内存屏障）jvm对指令进行重排序，即使无法确定操作之间的顺序，保证写操作先行于读操作。
  Volatile关键字原理：其修饰的变量在写操作时多出了Lock的指令，1.将当前缓存行的数据写回到系统内存；2.写回内存的操作会让其他缓存有该变量内存地址的数据无效。

5.多线程的三特性：
	原子性：一个线程的操作完成之前不会被其他线程干扰，成败一致。
	有序性：程序执行按照一定顺序（通常为代码的先后顺序），无法保证happens-before（先天顺序）原则的，jvm可对其重排。
	可见性：一个线程对共享变量（加锁）的改变，其他线程可以立即知晓。

6.缓存一致性：当多个处理器核心同时在对一个共享变量存在读写操作时，处理器核心通过嗅探总线上传播的数据（是否被修改）来决定自己缓存的数据是否失效，失效即重新从主存中读取并缓存数据。



















































































































































































